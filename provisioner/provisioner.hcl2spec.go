// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package provisioner

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	EnablePasswordlessSudo *bool    `mapstructure:"enable_passwordless_sudo" cty:"enable_passwordless_sudo" hcl:"enable_passwordless_sudo"`
	InstallHomebrew        *bool    `mapstructure:"install_homebrew" cty:"install_homebrew" hcl:"install_homebrew"`
	HomebrewDependencies   []string `mapstructure:"homebrew_dependencies" cty:"homebrew_dependencies" hcl:"homebrew_dependencies"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"enable_passwordless_sudo": &hcldec.AttrSpec{Name: "enable_passwordless_sudo", Type: cty.Bool, Required: false},
		"install_homebrew":         &hcldec.AttrSpec{Name: "install_homebrew", Type: cty.Bool, Required: false},
		"homebrew_dependencies":    &hcldec.AttrSpec{Name: "homebrew_dependencies", Type: cty.List(cty.String), Required: false},
	}
	return s
}
